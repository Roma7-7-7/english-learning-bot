package views

import (
    "fmt"
    "strconv"
)

type WordTranslation struct {
    Word        string
    Translation string
    ToReview    bool
}

type Pagination struct {
    Limit      int
    Page       int
    TotalPages int
}

func (p Pagination) PageToHref(page int) templ.SafeURL {
    return templ.SafeURL(fmt.Sprintf("?page=%d", page))
}

func (p Pagination) Offset() int {
    return (p.Page - 1) * p.Limit
}

func (p Pagination) CalcTotalPages(totalWords int) int {
	return int(totalWords/p.Limit) + 1
}

type WordsQueryParams struct {
    Search   string
    Paginate Pagination
}

templ ListWordsPage(stats Stats, q WordsQueryParams, err string) {
    @base() {
        @navbar(stats)
        <div id="content" class="p-3">
            @ListWords(q, nil, err)
            <div class="row">
                @ErrorAlertDiv(err)
            </div>
        </div>
    }
}

templ ListWords(q WordsQueryParams, rows []WordTranslation, err string) {
    <div id="words">
        <div class="row">
            <div class="col-12">
                <form id="searchForm" class="form-inline" hx-get="/words" hx-target="#words" hx-swap="outerHTML" hx-trigger="load">
                    <div class="form-group">
                        <label><input class="form-control" type="text" name="search" placeholder="Search" value={ q.Search }></label>
                    </div>
                    <input type="hidden" name="page" value={ strconv.Itoa(q.Paginate.Page) }>
                    <button class="btn btn-primary" type="submit">Search</button>
                </form>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Word</th>
                            <th>Translation</th>
                            <th>To Review</th>
                            <th>Edit</th>
                            <th>Delete</th>
                        </tr>
                    </thead>
                    <tbody>
                        for _, row := range rows {
                            <tr>
                                <td>{ row.Word }</td>
                                <td>{ row.Translation }</td>
                                <td>
                                    if row.ToReview {
                                        Yes
                                    } else {
                                        No
                                    }
                                </td>
                                <td class="text-center">
                                    <button class="btn btn-link bi bi-pencil" data-word={ row.Word }></button>
                                </td>
                                <td class="text-center">
                                    <button class="btn btn-link bi bi-trash" data-word={ row.Word }></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-center">
                    @pagination(q.Paginate)
                </div>
            </div>
        </div>
    </div>
}

templ pagination(p Pagination) {
    switch p.TotalPages {
    case 0, 1:
        <span></span>
    case 2, 3, 4, 5, 6, 7:
        <ul class="pagination">
            for i := range p.TotalPages {
                <li class="page-item">
                    <a class={ "page-link", templ.KV("active", p.Page == i + 1) } href={ templ.URL(fmt.Sprintf("?page=%d", i + 1)) }>{ strconv.Itoa(i + 1) }</a>
                </li>
            }
        </ul>
    default:
        <ul class="pagination">
            <li class={ "page-item", templ.KV("disabled", p.Page == 1) }>
                <a class="page-link" href={ p.PageToHref(1) }>
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
            &nbsp;&nbsp;

            if p.Page > 2 {
                <li class={ "page-item", templ.KV("disabled", p.Page == 1) }>
                    <a class="page-link" href={ p.PageToHref(p.Page - 2)}>{ strconv.Itoa(p.Page - 2) }</a>
                </li>
            }
            if p.Page > 1 {
                <li class={ "page-item", templ.KV("disabled", p.Page == 1) }>
                    <a class="page-link" href={ p.PageToHref(p.Page - 1)}>{ strconv.Itoa(p.Page - 1) }</a>
                </li>
            }

            <li class="page-item active disabled">
                <a class="page-link" href={ p.PageToHref(p.Page)}>{ strconv.Itoa(p.Page) }</a>
            </li>

            if p.Page < p.TotalPages - 1 {
                <li class={ "page-item", templ.KV("disabled", p.Page == p.TotalPages) }>
                    <a class="page-link" href={ p.PageToHref(p.Page + 1)}>{ strconv.Itoa(p.Page + 1) }</a>
                </li>
            }
            if p.Page < p.TotalPages {
                <li class={ "page-item", templ.KV("disabled", p.Page == p.TotalPages) }>
                    <a class="page-link" href={ p.PageToHref(p.Page + 2)}>{ strconv.Itoa(p.Page + 2) }</a>
                </li>
            }

            &nbsp;&nbsp;
            <li class={ "page-item", templ.KV("disabled", p.Page == p.TotalPages) } aria-label="Last">
                <a class="page-link" href={ p.PageToHref(p.TotalPages)}>
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        </ul>
    }
}
