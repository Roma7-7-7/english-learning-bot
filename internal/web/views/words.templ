package views

import (
    "fmt"
    "strconv"
)

type WordsQueryParams struct {
    Search     string
    ToReview   bool
    Pagination Pagination
}

func (qp WordsQueryParams) PageToHref(page int) templ.SafeURL {
    return qp.toHref("/words", "", page)
}

func (qp WordsQueryParams) EditPageToHref(word string) templ.SafeURL {
    return qp.toHref("/words/edit", word, qp.Pagination.Page)
}

func (qp WordsQueryParams) toHref(path, word string, page int) templ.SafeURL {
    res := fmt.Sprintf("%s?search=%s&page=%d", path, qp.Search, page)
    if word != "" {
        res = fmt.Sprintf("%s&word=%s", res, word)
    }
    if qp.ToReview {
        res = fmt.Sprintf("%s&to_review=on", res)
    }
    return templ.SafeURL(res)
}

type WordTranslation struct {
    Word        string
    Translation string
    Description string
    ToReview    bool
}

type Pagination struct {
    Limit      int
    Page       int
    TotalPages int
}

func (p Pagination) Offset() int {
    return (p.Page - 1) * p.Limit
}

func (p Pagination) CalcTotalPages(totalWords int) int {
    if totalWords % p.Limit == 0 {
        return int(totalWords/p.Limit)
    }
	return int(totalWords/p.Limit) + 1
}

templ ListWordsPage(stats Stats, qp WordsQueryParams, words []WordTranslation, err string) {
    @base() {
        @navbar(stats)
        <div id="content" class="p-3">
            <form id="searchForm" class="row form-inline form-group align-items-center mb-3">
                <div class="col-3">
                    <label><input class="form-control" type="text" name="search" placeholder="Search" value={ qp.Search }></label>
                </div>
                <div class="col-2">
                    <div class="form-check d-flex align-items-center h-100">
                        <label class="form-check-label ms-2">
                            <input name="to_review" type="checkbox" class="form-check-input" checked?={ qp.ToReview }> To Review
                        </label>
                    </div>
                </div>
                <div class="col-3"></div>
                <input id="pageInput" type="hidden" name="page" value={ strconv.Itoa(qp.Pagination.Page) }>
                <div class="col-3">
                    <button class="btn btn-primary" style="width: 100%" type="submit">Submit</button>
                </div>
                <div class="col-1">
                    <a href="/words" class="btn btn-secondary"><span aria-hidden="true">&times;</span></a>
                </div>
            </form>
            <div id="words">
                <div class="row">
                    <div class="col-12">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Word</th>
                                    <th>Translation</th>
                                    <th>To Review</th>
                                    <th>Edit</th>
                                    <th>Delete</th>
                                </tr>
                            </thead>
                            <tbody>
                                for _, word := range words {
                                    <tr>
                                        <td>{ word.Word }</td>
                                        <td>{ word.Translation }</td>
                                        <td>
                                            if word.ToReview {
                                                Yes
                                            } else {
                                                No
                                            }
                                        </td>
                                        <td class="text-center">
                                            <a href={ qp.EditPageToHref(word.Word) } class="btn btn-link bi bi-pencil"></a>
                                        </td>
                                        <td class="text-center">
                                            <button class="btn btn-link bi bi-trash" data-word={ word.Word }></button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12">
                        <div class="d-flex justify-content-center">
                            @pagination(qp)
                        </div>
                    </div>
                </div>
                <script>
                </script>
            </div>
            <div class="row">
                @ErrorAlertDiv(err)
            </div>
            <script>
                document.querySelectorAll('.bi-trash').forEach((el) => {
                    el.addEventListener('click', (e) => {
                        const word = e.target.getAttribute('data-word');
                        if (!confirm(`Are you sure you want to delete the word "${word}"?`)) {word
                            return;
                        }
                        fetch(`/words/${word}`, {
                            method: 'DELETE',
                        }).then((response) => {
                            if (response.ok) {
                                window.location.reload();
                            }
                        });
                    });
                });
            </script>
        </div>
    }
}

templ WordPage(stats Stats, wt WordTranslation, redirectTo templ.SafeURL, err string) {
    @base() {
        @navbar(stats)
        <div id="content" class="p-3">
            <div class="row">
                <div class="col-3"></div>
                <div class="col-6">
                    <div class="row">
                        <form class="needs-validation" novalidate>
                            <div class="col-12">
                                <label class="form-label ms-2">
                                    Word: <input class="form-control" type="text" name="word" value={ wt.Word } required>
                                </label>
                            </div>
                            <div class="col-12">
                                <label class="form-label ms-2">
                                    Translation: <input class="form-control" type="text" name="translation" value={ wt.Translation } required>
                                </label>
                            </div>
                            <div class="col-12">
                                <label class="form-label ms-2">
                                    Description: <input class="form-control" type="text" name="translation" value={ wt.Description }>
                                </label>
                            </div>
                            <div class="col-12 mb-3">
                                <label class="form-check-label ms-2">
                                    To Review:
                                    <input name="to_review" type="checkbox" class="form-check-input" checked?={ wt.ToReview }>
                                </label>
                            </div>
                            <div class="col-12 d-flex justify-content-center">
                                <div class="row">
                                    <div class="col-6 d-flex justify-content-center">
                                        <button class="btn btn-primary" type="submit">Submit</button>
                                    </div>
                                    <div class="col-6 d-flex justify-content-center">
                                        <a id="cancelBtn" class="btn btn-secondary" href={ redirectTo }>Cancel</a>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="row">
                        @ErrorAlertDiv(err)
                    </div>
                </div>
            </div>
        </div>
        <script>
            (() => {
              'use strict'

              // Fetch all the forms we want to apply custom Bootstrap validation styles to
              const forms = document.querySelectorAll('.needs-validation')

              // Loop over them and prevent submission
              Array.from(forms).forEach(form => {
                form.addEventListener('submit', event => {
                  if (!form.checkValidity()) {
                    event.preventDefault()
                    event.stopPropagation()
                  }

                  form.classList.add('was-validated')
                }, false)
              })
            })();

            document.getElementById("cancelBtn").addEventListener('click', (e) => {
                e.preventDefault();
                if (confirm("Are you sure? All changes will be lost")) {
                    document.location.href = e.target.getAttribute('href');
                }
            });

        </script>
    }
}

templ pagination(qp WordsQueryParams) {
    switch qp.Pagination.TotalPages {
    case 0, 1:
        <span></span>
    case 2, 3, 4, 5, 6, 7:
        <ul class="pagination">
            for i := range qp.Pagination.TotalPages {
                <li class="page-item">
                    <a class={ "page-link", templ.KV("active", qp.Pagination.Page == i + 1) } href={ qp.PageToHref(i + 1) }>{ strconv.Itoa(i + 1) }</a>
                </li>
            }
        </ul>
    default:
        <ul class="pagination">
            <li class={ "page-item", templ.KV("disabled", qp.Pagination.Page == 1) }>
                <a class="page-link"  href={ qp.PageToHref(1) }>
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
            &nbsp;&nbsp;

            if qp.Pagination.Page > 2 {
                <li class={ "page-item", templ.KV("disabled", qp.Pagination.Page == 1) }>
                    <a class="page-link" href={ qp.PageToHref(qp.Pagination.Page - 2) }>{ strconv.Itoa(qp.Pagination.Page - 2) }</a>
                </li>
            }
            if qp.Pagination.Page > 1 {
                <li class={ "page-item", templ.KV("disabled", qp.Pagination.Page == 1) }>
                    <a class="page-link" href={ qp.PageToHref(qp.Pagination.Page - 1) }>{ strconv.Itoa(qp.Pagination.Page - 1) }</a>
                </li>
            }

            <li class="page-item active disabled">
                <a class="page-link" href={ qp.PageToHref(qp.Pagination.Page) }>{ strconv.Itoa(qp.Pagination.Page) }</a>
            </li>

            if qp.Pagination.Page <= qp.Pagination.TotalPages - 1 {
                <li class={ "page-item", templ.KV("disabled", qp.Pagination.Page == qp.Pagination.TotalPages) }>
                    <a class="page-link" href={ qp.PageToHref(qp.Pagination.Page + 1) }>{ strconv.Itoa(qp.Pagination.Page + 1) }</a>
                </li>
            }
            if qp.Pagination.Page <= qp.Pagination.TotalPages - 2 {
                <li class={ "page-item", templ.KV("disabled", qp.Pagination.Page == qp.Pagination.TotalPages) }>
                    <a class="page-link" href={ qp.PageToHref(qp.Pagination.Page + 2) }>{ strconv.Itoa(qp.Pagination.Page + 2) }</a>
                </li>
            }

            &nbsp;&nbsp;
            <li class={ "page-item", templ.KV("disabled", qp.Pagination.Page == qp.Pagination.TotalPages) } aria-label="Last">
                <a class="page-link" href={ qp.PageToHref(qp.Pagination.TotalPages) }>
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        </ul>
    }
}
